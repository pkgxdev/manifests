This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by configure, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  $ /tmp/pkgx.3c326cd3b76e2bee/src/configure --prefix=/tmp/pkgx.3c326cd3b76e2bee/dst/gnu.org/gcc/libstdcxx/v14.2.0 --enable-languages=c,c++ --disable-multilib --disable-bootstrap --disable-nls --enable-default-pie --enable-pie-tools --enable-host-pie

## --------- ##
## Platform. ##
## --------- ##

hostname = d6ebc7bb109d
uname -m = x86_64
uname -r = 6.10.14-linuxkit
uname -s = Linux
uname -v = #1 SMP Thu Mar 20 16:32:56 UTC 2025

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /tmp/pkgx.3c326cd3b76e2bee/pkgs/gnu.org/binutils/v2.44.0/bin
PATH: /tmp/pkgx.3c326cd3b76e2bee/pkgs/gnu.org/gcc/v14.2.0/bin
PATH: /tmp/pkgx.3c326cd3b76e2bee/bin
PATH: /usr/bin
PATH: /bin
PATH: /usr/sbin
PATH: /sbin


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2397: checking build system type
configure:2411: result: x86_64-pc-linux-gnu
configure:2458: checking host system type
configure:2471: result: x86_64-pc-linux-gnu
configure:2491: checking target system type
configure:2504: result: x86_64-pc-linux-gnu
configure:2558: checking for a BSD-compatible install
configure:2626: result: /usr/bin/install -c
configure:2637: checking whether ln works
configure:2659: result: yes
configure:2663: checking whether ln -s works
configure:2667: result: yes
configure:2674: checking for a sed that does not truncate output
configure:2738: result: /bin/sed
configure:2747: checking for gawk
configure:2777: result: no
configure:2747: checking for mawk
configure:2763: found /usr/bin/mawk
configure:2774: result: mawk
configure:3301: checking for libatomic support
configure:3311: result: yes
configure:3320: checking for libitm support
configure:3330: result: yes
configure:3339: checking for libsanitizer support
configure:3349: result: yes
configure:3358: checking for libvtv support
configure:3368: result: yes
configure:3488: checking for libphobos support
configure:3498: result: yes
configure:4207: checking for gcc
configure:4223: found /tmp/pkgx.3c326cd3b76e2bee/pkgs/gnu.org/gcc/v14.2.0/bin/gcc
configure:4234: result: gcc
configure:4463: checking for C compiler version
configure:4472: gcc --version >&5
gcc (pkgx GCC 14.2.0) 14.2.0
Copyright (C) 2024 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:4483: $? = 0
configure:4472: gcc -v >&5
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/tmp/pkgx.3c326cd3b76e2bee/pkgs/gnu.org/gcc/v14.2.0/bin/../libexec/gcc/x86_64-pc-linux-gnu/14.2.0/lto-wrapper
Target: x86_64-pc-linux-gnu
Configured with: /tmp/pkgx.267465599620a412/src/configure --prefix=/tmp/pkgx.267465599620a412/dst/gnu.org/gcc/v14.2.0 --enable-languages=c,c++ --disable-multilib --disable-bootstrap --with-bugurl=https://github.com/pkgxdev/manifests/issues --disable-nls --enable-shared --with-pkgversion='pkgx GCC 14.2.0' --disable-multilib --enable-default-pie --enable-pie-tools --enable-host-pie
Thread model: posix
Supported LTO compression algorithms: zlib
gcc version 14.2.0 (pkgx GCC 14.2.0) 
configure:4483: $? = 0
configure:4472: gcc -V >&5
gcc: error: unrecognized command-line option '-V'
gcc: fatal error: no input files
compilation terminated.
configure:4483: $? = 1
configure:4472: gcc -qversion >&5
gcc: error: unrecognized command-line option '-qversion'; did you mean '--version'?
gcc: fatal error: no input files
compilation terminated.
configure:4483: $? = 1
configure:4503: checking whether the C compiler works
configure:4525: gcc -static-libgcc   -static-libgcc  conftest.c  >&5
configure:4529: $? = 0
configure:4577: result: yes
configure:4580: checking for C compiler default output file name
configure:4582: result: a.out
configure:4588: checking for suffix of executables
configure:4595: gcc -o conftest -static-libgcc   -static-libgcc  conftest.c  >&5
configure:4599: $? = 0
configure:4621: result: 
configure:4643: checking whether we are cross compiling
configure:4651: gcc -o conftest -static-libgcc   -static-libgcc  conftest.c  >&5
configure:4655: $? = 0
configure:4662: ./conftest
configure:4666: $? = 0
configure:4654: result: no
configure:4659: checking for suffix of object files
configure:4681: gcc -c -static-libgcc   conftest.c >&5
configure:4685: $? = 0
configure:4706: result: o
configure:4710: checking whether we are using the GNU C compiler
configure:4729: gcc -c -static-libgcc   conftest.c >&5
configure:4729: $? = 0
configure:4738: result: yes
configure:4747: checking whether gcc accepts -g
configure:4767: gcc -c -g  conftest.c >&5
configure:4767: $? = 0
configure:4808: result: yes
configure:4825: checking for gcc option to accept ISO C89
configure:4888: gcc  -c -static-libgcc   conftest.c >&5
configure:4888: $? = 0
configure:4901: result: none needed
configure:4921: checking for gcc option to accept ISO C99
configure:5070: gcc  -c -static-libgcc   conftest.c >&5
conftest.c: In function 'main':
conftest.c:116:3: internal compiler error: Illegal instruction
  116 |   test_varargs ("s, d' f .", "string", 65, 34.234);
      |   ^~~~~~~~~~~~
0x5555572c2c68 internal_error(char const*, ...)
	???:0
0x7ffffbf51e6c mpfr_strtofr
	???:0
0x5555561317b0 real_from_string(real_value*, char const*)
	???:0
0x5555561322cb real_from_string3(real_value*, char const*, format_helper)
	???:0
0x555555c871bd c_lex_with_flags(tree_node**, unsigned int*, unsigned char*, int)
	???:0
0x555555c2c0ed c_parse_file()
	???:0
0x555555c94207 c_common_parse_file()
	???:0
Please submit a full bug report, with preprocessed source (by using -freport-bug).
Please include the complete backtrace with any bug report.
See <https://github.com/pkgxdev/manifests/issues> for instructions.
configure:5070: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdbool.h>
| #include <stdlib.h>
| #include <wchar.h>
| #include <stdio.h>
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| #define debug(...) fprintf (stderr, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   your preprocessor is broken;
| #endif
| #if BIG_OK
| #else
|   your preprocessor is broken;
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static void
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str;
|   int number;
|   float fnumber;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| }
| 
| int
| main ()
| {
| 
|   // Check bool.
|   _Bool success = false;
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   return (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	  || dynamic_array[ni.number - 1] != 543);
| 
|   ;
|   return 0;
| }
configure:5070: gcc -std=gnu99 -c -static-libgcc   conftest.c >&5
conftest.c: In function 'main':
conftest.c:116:3: internal compiler error: Illegal instruction
  116 |   test_varargs ("s, d' f .", "string", 65, 34.234);
      |   ^~~~~~~~~~~~
0x5555572c2c68 internal_error(char const*, ...)
	???:0
0x7ffffbf51e6c mpfr_strtofr
	???:0
0x5555561317b0 real_from_string(real_value*, char const*)
	???:0
0x5555561322cb real_from_string3(real_value*, char const*, format_helper)
	???:0
0x555555c871bd c_lex_with_flags(tree_node**, unsigned int*, unsigned char*, int)
	???:0
0x555555c2c0ed c_parse_file()
	???:0
0x555555c94207 c_common_parse_file()
	???:0
Please submit a full bug report, with preprocessed source (by using -freport-bug).
Please include the complete backtrace with any bug report.
See <https://github.com/pkgxdev/manifests/issues> for instructions.
configure:5070: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdbool.h>
| #include <stdlib.h>
| #include <wchar.h>
| #include <stdio.h>
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| #define debug(...) fprintf (stderr, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   your preprocessor is broken;
| #endif
| #if BIG_OK
| #else
|   your preprocessor is broken;
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static void
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str;
|   int number;
|   float fnumber;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| }
| 
| int
| main ()
| {
| 
|   // Check bool.
|   _Bool success = false;
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   return (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	  || dynamic_array[ni.number - 1] != 543);
| 
|   ;
|   return 0;
| }
configure:5070: gcc -std=c99 -c -static-libgcc   conftest.c >&5
conftest.c: In function 'main':
conftest.c:116:3: internal compiler error: Illegal instruction
  116 |   test_varargs ("s, d' f .", "string", 65, 34.234);
      |   ^~~~~~~~~~~~
0x5555572c2c68 internal_error(char const*, ...)
	???:0
0x7ffffbf51e6c mpfr_strtofr
	???:0
0x5555561317b0 real_from_string(real_value*, char const*)
	???:0
0x5555561322cb real_from_string3(real_value*, char const*, format_helper)
	???:0
0x555555c871bd c_lex_with_flags(tree_node**, unsigned int*, unsigned char*, int)
	???:0
0x555555c2c0ed c_parse_file()
	???:0
0x555555c94207 c_common_parse_file()
	???:0
Please submit a full bug report, with preprocessed source (by using -freport-bug).
Please include the complete backtrace with any bug report.
See <https://github.com/pkgxdev/manifests/issues> for instructions.
configure:5070: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdbool.h>
| #include <stdlib.h>
| #include <wchar.h>
| #include <stdio.h>
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| #define debug(...) fprintf (stderr, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   your preprocessor is broken;
| #endif
| #if BIG_OK
| #else
|   your preprocessor is broken;
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static void
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str;
|   int number;
|   float fnumber;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| }
| 
| int
| main ()
| {
| 
|   // Check bool.
|   _Bool success = false;
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   return (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	  || dynamic_array[ni.number - 1] != 543);
| 
|   ;
|   return 0;
| }
configure:5070: gcc -c99 -c -static-libgcc   conftest.c >&5
gcc: error: unrecognized command-line option '-c99'
configure:5070: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdbool.h>
| #include <stdlib.h>
| #include <wchar.h>
| #include <stdio.h>
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| #define debug(...) fprintf (stderr, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   your preprocessor is broken;
| #endif
| #if BIG_OK
| #else
|   your preprocessor is broken;
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static void
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str;
|   int number;
|   float fnumber;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| }
| 
| int
| main ()
| {
| 
|   // Check bool.
|   _Bool success = false;
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   return (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	  || dynamic_array[ni.number - 1] != 543);
| 
|   ;
|   return 0;
| }
configure:5070: gcc -AC99 -c -static-libgcc   conftest.c >&5
<command-line>: error: missing '(' after predicate
conftest.c:116: confused by earlier errors, bailing out
configure:5070: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdbool.h>
| #include <stdlib.h>
| #include <wchar.h>
| #include <stdio.h>
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| #define debug(...) fprintf (stderr, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   your preprocessor is broken;
| #endif
| #if BIG_OK
| #else
|   your preprocessor is broken;
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static void
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str;
|   int number;
|   float fnumber;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| }
| 
| int
| main ()
| {
| 
|   // Check bool.
|   _Bool success = false;
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   return (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	  || dynamic_array[ni.number - 1] != 543);
| 
|   ;
|   return 0;
| }
configure:5070: gcc -D_STDC_C99= -c -static-libgcc   conftest.c >&5
conftest.c: In function 'main':
conftest.c:116:3: internal compiler error: Illegal instruction
  116 |   test_varargs ("s, d' f .", "string", 65, 34.234);
      |   ^~~~~~~~~~~~
0x5555572c2c68 internal_error(char const*, ...)
	???:0
0x7ffffbf51e6c mpfr_strtofr
	???:0
0x5555561317b0 real_from_string(real_value*, char const*)
	???:0
0x5555561322cb real_from_string3(real_value*, char const*, format_helper)
	???:0
0x555555c871bd c_lex_with_flags(tree_node**, unsigned int*, unsigned char*, int)
	???:0
0x555555c2c0ed c_parse_file()
	???:0
0x555555c94207 c_common_parse_file()
	???:0
Please submit a full bug report, with preprocessed source (by using -freport-bug).
Please include the complete backtrace with any bug report.
See <https://github.com/pkgxdev/manifests/issues> for instructions.
configure:5070: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdbool.h>
| #include <stdlib.h>
| #include <wchar.h>
| #include <stdio.h>
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| #define debug(...) fprintf (stderr, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   your preprocessor is broken;
| #endif
| #if BIG_OK
| #else
|   your preprocessor is broken;
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static void
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str;
|   int number;
|   float fnumber;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| }
| 
| int
| main ()
| {
| 
|   // Check bool.
|   _Bool success = false;
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   return (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	  || dynamic_array[ni.number - 1] != 543);
| 
|   ;
|   return 0;
| }
configure:5070: gcc -qlanglvl=extc99 -c -static-libgcc   conftest.c >&5
gcc: error: unrecognized command-line option '-qlanglvl=extc99'
configure:5070: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdbool.h>
| #include <stdlib.h>
| #include <wchar.h>
| #include <stdio.h>
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| #define debug(...) fprintf (stderr, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   your preprocessor is broken;
| #endif
| #if BIG_OK
| #else
|   your preprocessor is broken;
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static void
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str;
|   int number;
|   float fnumber;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| }
| 
| int
| main ()
| {
| 
|   // Check bool.
|   _Bool success = false;
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   return (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	  || dynamic_array[ni.number - 1] != 543);
| 
|   ;
|   return 0;
| }
configure:5086: result: unsupported
configure:5156: checking for g++
configure:5172: found /tmp/pkgx.3c326cd3b76e2bee/pkgs/gnu.org/gcc/v14.2.0/bin/g++
configure:5183: result: g++
configure:5210: checking for C++ compiler version
configure:5219: g++ --version >&5
g++ (pkgx GCC 14.2.0) 14.2.0
Copyright (C) 2024 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:5230: $? = 0
configure:5219: g++ -v >&5
Using built-in specs.
COLLECT_GCC=g++
COLLECT_LTO_WRAPPER=/tmp/pkgx.3c326cd3b76e2bee/pkgs/gnu.org/gcc/v14.2.0/bin/../libexec/gcc/x86_64-pc-linux-gnu/14.2.0/lto-wrapper
Target: x86_64-pc-linux-gnu
Configured with: /tmp/pkgx.267465599620a412/src/configure --prefix=/tmp/pkgx.267465599620a412/dst/gnu.org/gcc/v14.2.0 --enable-languages=c,c++ --disable-multilib --disable-bootstrap --with-bugurl=https://github.com/pkgxdev/manifests/issues --disable-nls --enable-shared --with-pkgversion='pkgx GCC 14.2.0' --disable-multilib --enable-default-pie --enable-pie-tools --enable-host-pie
Thread model: posix
Supported LTO compression algorithms: zlib
gcc version 14.2.0 (pkgx GCC 14.2.0) 
configure:5230: $? = 0
configure:5219: g++ -V >&5
g++: error: unrecognized command-line option '-V'
g++: fatal error: no input files
compilation terminated.
configure:5230: $? = 1
configure:5219: g++ -qversion >&5
g++: error: unrecognized command-line option '-qversion'; did you mean '--version'?
g++: fatal error: no input files
compilation terminated.
configure:5230: $? = 1
configure:5234: checking whether we are using the GNU C++ compiler
configure:5253: g++ -c -static-libgcc   conftest.cpp >&5
configure:5253: $? = 0
configure:5262: result: yes
configure:5271: checking whether g++ accepts -g
configure:5291: g++ -c -g  conftest.cpp >&5
configure:5291: $? = 0
configure:5332: result: yes
configure:5381: checking whether g++ accepts -static-libstdc++ -static-libgcc
configure:5398: g++ -o conftest -static-libgcc   -static-libgcc  -static-libstdc++ -static-libgcc conftest.cpp  >&5
configure:5398: $? = 0
configure:5399: result: yes
configure:5463: checking for gnatbind
configure:5493: result: no
configure:5555: checking for gnatmake
configure:5585: result: no
configure:5604: checking whether compiler driver understands Ada and is recent enough
configure:5631: result: no
configure:5685: checking for gdc
configure:5715: result: no
configure:5734: checking whether the D compiler works
configure:5751: result: no
configure:5763: checking for cargo
configure:5793: result: no
configure:5807: checking how to compare bootstrapped objects
configure:5832: result: cmp --ignore-initial=16 $$f1 $$f2
configure:5899: checking whether g++ supports C++11 features by default
configure:6195: g++ -c -static-libgcc   conftest.cpp >&5
conftest.cpp:112:7: internal compiler error: Illegal instruction
  112 |       auto sumf = ac + av + 1.0;
      |       ^~~~
0x555557494a28 internal_error(char const*, ...)
	???:0
0x7ffffbf51e6c mpfr_strtofr
	???:0
0x5555563063b0 real_from_string(real_value*, char const*)
	???:0
0x555556306ecb real_from_string3(real_value*, char const*, format_helper)
	???:0
0x555555e6023d c_lex_with_flags(tree_node**, unsigned int*, unsigned char*, int)
	???:0
0x555555d6cde5 c_parse_file()
	???:0
0x555555e6d287 c_common_parse_file()
	???:0
Please submit a full bug report, with preprocessed source (by using -freport-bug).
Please include the complete backtrace with any bug report.
See <https://github.com/pkgxdev/manifests/issues> for instructions.
configure:6195: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
configure:6202: result: no
configure:6212: checking whether g++ supports C++11 features with -std=gnu++11
configure:6510: g++ -std=gnu++11 -c -static-libgcc   conftest.cpp >&5
conftest.cpp:112:7: internal compiler error: Illegal instruction
  112 |       auto sumf = ac + av + 1.0;
      |       ^~~~
0x555557494a28 internal_error(char const*, ...)
	???:0
0x7ffffbf51e6c mpfr_strtofr
	???:0
0x5555563063b0 real_from_string(real_value*, char const*)
	???:0
0x555556306ecb real_from_string3(real_value*, char const*, format_helper)
	???:0
0x555555e6023d c_lex_with_flags(tree_node**, unsigned int*, unsigned char*, int)
	???:0
0x555555d6cde5 c_parse_file()
	???:0
0x555555e6d287 c_common_parse_file()
	???:0
Please submit a full bug report, with preprocessed source (by using -freport-bug).
Please include the complete backtrace with any bug report.
See <https://github.com/pkgxdev/manifests/issues> for instructions.
configure:6510: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
configure:6519: result: no
configure:6212: checking whether g++ supports C++11 features with -std=gnu++0x
configure:6510: g++ -std=gnu++0x -c -static-libgcc   conftest.cpp >&5
conftest.cpp:112:7: internal compiler error: Illegal instruction
  112 |       auto sumf = ac + av + 1.0;
      |       ^~~~
0x555557494a28 internal_error(char const*, ...)
	???:0
0x7ffffbf51e6c mpfr_strtofr
	???:0
0x5555563063b0 real_from_string(real_value*, char const*)
	???:0
0x555556306ecb real_from_string3(real_value*, char const*, format_helper)
	???:0
0x555555e6023d c_lex_with_flags(tree_node**, unsigned int*, unsigned char*, int)
	???:0
0x555555d6cde5 c_parse_file()
	???:0
0x555555e6d287 c_common_parse_file()
	???:0
Please submit a full bug report, with preprocessed source (by using -freport-bug).
Please include the complete backtrace with any bug report.
See <https://github.com/pkgxdev/manifests/issues> for instructions.
configure:6510: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
configure:6519: result: no
configure:6536: checking whether g++ supports C++11 features with -std=c++11
configure:6834: g++ -std=c++11 -c -static-libgcc   conftest.cpp >&5
conftest.cpp:112:7: internal compiler error: Illegal instruction
  112 |       auto sumf = ac + av + 1.0;
      |       ^~~~
0x555557494a28 internal_error(char const*, ...)
	???:0
0x7ffffbf51e6c mpfr_strtofr
	???:0
0x5555563063b0 real_from_string(real_value*, char const*)
	???:0
0x555556306ecb real_from_string3(real_value*, char const*, format_helper)
	???:0
0x555555e6023d c_lex_with_flags(tree_node**, unsigned int*, unsigned char*, int)
	???:0
0x555555d6cde5 c_parse_file()
	???:0
0x555555e6d287 c_common_parse_file()
	???:0
Please submit a full bug report, with preprocessed source (by using -freport-bug).
Please include the complete backtrace with any bug report.
See <https://github.com/pkgxdev/manifests/issues> for instructions.
configure:6834: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
configure:6843: result: no
configure:6536: checking whether g++ supports C++11 features with +std=c++11
configure:6834: g++ +std=c++11 -c -static-libgcc   conftest.cpp >&5
conftest.cpp:112:7: internal compiler error: Illegal instruction
  112 |       auto sumf = ac + av + 1.0;
      |       ^~~~
0x555557494a28 internal_error(char const*, ...)
	???:0
0x7ffffbf51e6c mpfr_strtofr
	???:0
0x5555563063b0 real_from_string(real_value*, char const*)
	???:0
0x555556306ecb real_from_string3(real_value*, char const*, format_helper)
	???:0
0x555555e6023d c_lex_with_flags(tree_node**, unsigned int*, unsigned char*, int)
	???:0
0x555555d6cde5 c_parse_file()
	???:0
0x555555e6d287 c_common_parse_file()
	???:0
Please submit a full bug report, with preprocessed source (by using -freport-bug).
Please include the complete backtrace with any bug report.
See <https://github.com/pkgxdev/manifests/issues> for instructions.
configure:6834: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
configure:6843: result: no
configure:6536: checking whether g++ supports C++11 features with -h std=c++11
configure:6834: g++ -h std=c++11 -c -static-libgcc   conftest.cpp >&5
g++: error: unrecognized command-line option '-h'
configure:6834: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
configure:6843: result: no
configure:6536: checking whether g++ supports C++11 features with -std=c++0x
configure:6834: g++ -std=c++0x -c -static-libgcc   conftest.cpp >&5
conftest.cpp:112:7: internal compiler error: Illegal instruction
  112 |       auto sumf = ac + av + 1.0;
      |       ^~~~
0x555557494a28 internal_error(char const*, ...)
	???:0
0x7ffffbf51e6c mpfr_strtofr
	???:0
0x5555563063b0 real_from_string(real_value*, char const*)
	???:0
0x555556306ecb real_from_string3(real_value*, char const*, format_helper)
	???:0
0x555555e6023d c_lex_with_flags(tree_node**, unsigned int*, unsigned char*, int)
	???:0
0x555555d6cde5 c_parse_file()
	???:0
0x555555e6d287 c_common_parse_file()
	???:0
Please submit a full bug report, with preprocessed source (by using -freport-bug).
Please include the complete backtrace with any bug report.
See <https://github.com/pkgxdev/manifests/issues> for instructions.
configure:6834: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
configure:6843: result: no
configure:6536: checking whether g++ supports C++11 features with +std=c++0x
configure:6834: g++ +std=c++0x -c -static-libgcc   conftest.cpp >&5
conftest.cpp:112:7: internal compiler error: Illegal instruction
  112 |       auto sumf = ac + av + 1.0;
      |       ^~~~
0x555557494a28 internal_error(char const*, ...)
	???:0
0x7ffffbf51e6c mpfr_strtofr
	???:0
0x5555563063b0 real_from_string(real_value*, char const*)
	???:0
0x555556306ecb real_from_string3(real_value*, char const*, format_helper)
	???:0
0x555555e6023d c_lex_with_flags(tree_node**, unsigned int*, unsigned char*, int)
	???:0
0x555555d6cde5 c_parse_file()
	???:0
0x555555e6d287 c_common_parse_file()
	???:0
Please submit a full bug report, with preprocessed source (by using -freport-bug).
Please include the complete backtrace with any bug report.
See <https://github.com/pkgxdev/manifests/issues> for instructions.
configure:6834: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
configure:6843: result: no
configure:6536: checking whether g++ supports C++11 features with -h std=c++0x
configure:6834: g++ -h std=c++0x -c -static-libgcc   conftest.cpp >&5
g++: error: unrecognized command-line option '-h'
configure:6834: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| 
| // If the compiler admits that it is not ready for C++11, why torture it?
| // Hopefully, this will speed up the test.
| 
| #ifndef __cplusplus
| 
| #error "This is not a C++ compiler"
| 
| #elif __cplusplus < 201103L
| 
| #error "This is not a C++11 compiler"
| 
| #else
| 
| namespace cxx11
| {
| 
|   namespace test_static_assert
|   {
| 
|     template <typename T>
|     struct check
|     {
|       static_assert(sizeof(int) <= sizeof(T), "not big enough");
|     };
| 
|   }
| 
|   namespace test_final_override
|   {
| 
|     struct Base
|     {
|       virtual ~Base() {}
|       virtual void f() {}
|     };
| 
|     struct Derived : public Base
|     {
|       virtual ~Derived() override {}
|       virtual void f() override {}
|     };
| 
|   }
| 
|   namespace test_double_right_angle_brackets
|   {
| 
|     template < typename T >
|     struct check {};
| 
|     typedef check<void> single_type;
|     typedef check<check<void>> double_type;
|     typedef check<check<check<void>>> triple_type;
|     typedef check<check<check<check<void>>>> quadruple_type;
| 
|   }
| 
|   namespace test_decltype
|   {
| 
|     int
|     f()
|     {
|       int a = 1;
|       decltype(a) b = 2;
|       return a + b;
|     }
| 
|   }
| 
|   namespace test_type_deduction
|   {
| 
|     template < typename T1, typename T2 >
|     struct is_same
|     {
|       static const bool value = false;
|     };
| 
|     template < typename T >
|     struct is_same<T, T>
|     {
|       static const bool value = true;
|     };
| 
|     template < typename T1, typename T2 >
|     auto
|     add(T1 a1, T2 a2) -> decltype(a1 + a2)
|     {
|       return a1 + a2;
|     }
| 
|     int
|     test(const int c, volatile int v)
|     {
|       static_assert(is_same<int, decltype(0)>::value == true, "");
|       static_assert(is_same<int, decltype(c)>::value == false, "");
|       static_assert(is_same<int, decltype(v)>::value == false, "");
|       auto ac = c;
|       auto av = v;
|       auto sumi = ac + av + 'x';
|       auto sumf = ac + av + 1.0;
|       static_assert(is_same<int, decltype(ac)>::value == true, "");
|       static_assert(is_same<int, decltype(av)>::value == true, "");
|       static_assert(is_same<int, decltype(sumi)>::value == true, "");
|       static_assert(is_same<int, decltype(sumf)>::value == false, "");
|       static_assert(is_same<int, decltype(add(c, v))>::value == true, "");
|       return (sumf > 0.0) ? sumi : add(c, v);
|     }
| 
|   }
| 
|   namespace test_noexcept
|   {
| 
|     int f() { return 0; }
|     int g() noexcept { return 0; }
| 
|     static_assert(noexcept(f()) == false, "");
|     static_assert(noexcept(g()) == true, "");
| 
|   }
| 
|   namespace test_constexpr
|   {
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c_r(const CharT *const s, const unsigned long acc) noexcept
|     {
|       return *s ? strlen_c_r(s + 1, acc + 1) : acc;
|     }
| 
|     template < typename CharT >
|     unsigned long constexpr
|     strlen_c(const CharT *const s) noexcept
|     {
|       return strlen_c_r(s, 0UL);
|     }
| 
|     static_assert(strlen_c("") == 0UL, "");
|     static_assert(strlen_c("1") == 1UL, "");
|     static_assert(strlen_c("example") == 7UL, "");
|     static_assert(strlen_c("another\0example") == 7UL, "");
| 
|   }
| 
|   namespace test_rvalue_references
|   {
| 
|     template < int N >
|     struct answer
|     {
|       static constexpr int value = N;
|     };
| 
|     answer<1> f(int&)       { return answer<1>(); }
|     answer<2> f(const int&) { return answer<2>(); }
|     answer<3> f(int&&)      { return answer<3>(); }
| 
|     void
|     test()
|     {
|       int i = 0;
|       const int c = 0;
|       static_assert(decltype(f(i))::value == 1, "");
|       static_assert(decltype(f(c))::value == 2, "");
|       static_assert(decltype(f(0))::value == 3, "");
|     }
| 
|   }
| 
|   namespace test_uniform_initialization
|   {
| 
|     struct test
|     {
|       static const int zero {};
|       static const int one {1};
|     };
| 
|     static_assert(test::zero == 0, "");
|     static_assert(test::one == 1, "");
| 
|   }
| 
|   namespace test_lambdas
|   {
| 
|     void
|     test1()
|     {
|       auto lambda1 = [](){};
|       auto lambda2 = lambda1;
|       lambda1();
|       lambda2();
|     }
| 
|     int
|     test2()
|     {
|       auto a = [](int i, int j){ return i + j; }(1, 2);
|       auto b = []() -> int { return '0'; }();
|       auto c = [=](){ return a + b; }();
|       auto d = [&](){ return c; }();
|       auto e = [a, &b](int x) mutable {
|         const auto identity = [](int y){ return y; };
|         for (auto i = 0; i < a; ++i)
|           a += b--;
|         return x + identity(a + b);
|       }(0);
|       return a + b + c + d + e;
|     }
| 
|     int
|     test3()
|     {
|       const auto nullary = [](){ return 0; };
|       const auto unary = [](int x){ return x; };
|       using nullary_t = decltype(nullary);
|       using unary_t = decltype(unary);
|       const auto higher1st = [](nullary_t f){ return f(); };
|       const auto higher2nd = [unary](nullary_t f1){
|         return [unary, f1](unary_t f2){ return f2(unary(f1())); };
|       };
|       return higher1st(nullary) + higher2nd(nullary)(unary);
|     }
| 
|   }
| 
|   namespace test_variadic_templates
|   {
| 
|     template <int...>
|     struct sum;
| 
|     template <int N0, int... N1toN>
|     struct sum<N0, N1toN...>
|     {
|       static constexpr auto value = N0 + sum<N1toN...>::value;
|     };
| 
|     template <>
|     struct sum<>
|     {
|       static constexpr auto value = 0;
|     };
| 
|     static_assert(sum<>::value == 0, "");
|     static_assert(sum<1>::value == 1, "");
|     static_assert(sum<23>::value == 23, "");
|     static_assert(sum<1, 2>::value == 3, "");
|     static_assert(sum<5, 5, 11>::value == 21, "");
|     static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, "");
| 
|   }
| 
|   // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae
|   // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function
|   // because of this.
|   namespace test_template_alias_sfinae
|   {
| 
|     struct foo {};
| 
|     template<typename T>
|     using member = typename T::member_type;
| 
|     template<typename T>
|     void func(...) {}
| 
|     template<typename T>
|     void func(member<T>*) {}
| 
|     void test();
| 
|     void test() { func<foo>(0); }
| 
|   }
| 
| }  // namespace cxx11
| 
| #endif  // __cplusplus >= 201103L
| 
| 
| 
configure:6843: result: no
configure:6868: error: *** A compiler with support for C++11 language features is required.

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_build=x86_64-pc-linux-gnu
ac_cv_c_compiler_gnu=yes
ac_cv_cxx_compiler_gnu=yes
ac_cv_env_AR_FOR_TARGET_set=
ac_cv_env_AR_FOR_TARGET_value=
ac_cv_env_AR_set=
ac_cv_env_AR_value=
ac_cv_env_AS_FOR_TARGET_set=
ac_cv_env_AS_FOR_TARGET_value=
ac_cv_env_AS_set=
ac_cv_env_AS_value=
ac_cv_env_CCC_set=
ac_cv_env_CCC_value=
ac_cv_env_CC_FOR_TARGET_set=
ac_cv_env_CC_FOR_TARGET_value=
ac_cv_env_CC_set=
ac_cv_env_CC_value=
ac_cv_env_CFLAGS_set=set
ac_cv_env_CFLAGS_value='-static-libgcc '
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CXXFLAGS_set=set
ac_cv_env_CXXFLAGS_value='-static-libgcc '
ac_cv_env_CXX_FOR_TARGET_set=
ac_cv_env_CXX_FOR_TARGET_value=
ac_cv_env_CXX_set=
ac_cv_env_CXX_value=
ac_cv_env_DLLTOOL_FOR_TARGET_set=
ac_cv_env_DLLTOOL_FOR_TARGET_value=
ac_cv_env_DLLTOOL_set=
ac_cv_env_DLLTOOL_value=
ac_cv_env_DSYMUTIL_FOR_TARGET_set=
ac_cv_env_DSYMUTIL_FOR_TARGET_value=
ac_cv_env_DSYMUTIL_set=
ac_cv_env_DSYMUTIL_value=
ac_cv_env_GCC_FOR_TARGET_set=
ac_cv_env_GCC_FOR_TARGET_value=
ac_cv_env_GDC_FOR_TARGET_set=
ac_cv_env_GDC_FOR_TARGET_value=
ac_cv_env_GFORTRAN_FOR_TARGET_set=
ac_cv_env_GFORTRAN_FOR_TARGET_value=
ac_cv_env_GM2_FOR_TARGET_set=
ac_cv_env_GM2_FOR_TARGET_value=
ac_cv_env_GOC_FOR_TARGET_set=
ac_cv_env_GOC_FOR_TARGET_value=
ac_cv_env_LDFLAGS_set=set
ac_cv_env_LDFLAGS_value='-static-libgcc '
ac_cv_env_LD_FOR_TARGET_set=
ac_cv_env_LD_FOR_TARGET_value=
ac_cv_env_LD_set=
ac_cv_env_LD_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_LIPO_FOR_TARGET_set=
ac_cv_env_LIPO_FOR_TARGET_value=
ac_cv_env_LIPO_set=
ac_cv_env_LIPO_value=
ac_cv_env_NM_FOR_TARGET_set=
ac_cv_env_NM_FOR_TARGET_value=
ac_cv_env_NM_set=
ac_cv_env_NM_value=
ac_cv_env_OBJCOPY_FOR_TARGET_set=
ac_cv_env_OBJCOPY_FOR_TARGET_value=
ac_cv_env_OBJCOPY_set=
ac_cv_env_OBJCOPY_value=
ac_cv_env_OBJDUMP_FOR_TARGET_set=
ac_cv_env_OBJDUMP_FOR_TARGET_value=
ac_cv_env_OBJDUMP_set=
ac_cv_env_OBJDUMP_value=
ac_cv_env_OTOOL_FOR_TARGET_set=
ac_cv_env_OTOOL_FOR_TARGET_value=
ac_cv_env_OTOOL_set=
ac_cv_env_OTOOL_value=
ac_cv_env_RANLIB_FOR_TARGET_set=
ac_cv_env_RANLIB_FOR_TARGET_value=
ac_cv_env_RANLIB_set=
ac_cv_env_RANLIB_value=
ac_cv_env_READELF_FOR_TARGET_set=
ac_cv_env_READELF_FOR_TARGET_value=
ac_cv_env_READELF_set=
ac_cv_env_READELF_value=
ac_cv_env_STRIP_FOR_TARGET_set=
ac_cv_env_STRIP_FOR_TARGET_value=
ac_cv_env_STRIP_set=
ac_cv_env_STRIP_value=
ac_cv_env_WINDMC_FOR_TARGET_set=
ac_cv_env_WINDMC_FOR_TARGET_value=
ac_cv_env_WINDMC_set=
ac_cv_env_WINDMC_value=
ac_cv_env_WINDRES_FOR_TARGET_set=
ac_cv_env_WINDRES_FOR_TARGET_value=
ac_cv_env_WINDRES_set=
ac_cv_env_WINDRES_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_build_configargs_set=
ac_cv_env_build_configargs_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_host_configargs_set=
ac_cv_env_host_configargs_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_env_target_configargs_set=
ac_cv_env_target_configargs_value=
ac_cv_host=x86_64-pc-linux-gnu
ac_cv_objext=o
ac_cv_path_SED=/bin/sed
ac_cv_path_install='/usr/bin/install -c'
ac_cv_prog_AWK=mawk
ac_cv_prog_ac_ct_CC=gcc
ac_cv_prog_ac_ct_CXX=g++
ac_cv_prog_cc_c89=
ac_cv_prog_cc_c99=no
ac_cv_prog_cc_g=yes
ac_cv_prog_cxx_g=yes
ac_cv_target=x86_64-pc-linux-gnu
acx_cv_cc_gcc_supports_ada=no
acx_cv_d_compiler_works=no
acx_cv_prog_LN=ln
ax_cv_cxx_compile_cxx11=no
ax_cv_cxx_compile_cxx11__h_std_cpp0x=no
ax_cv_cxx_compile_cxx11__h_std_cpp11=no
ax_cv_cxx_compile_cxx11__std_cpp0x=no
ax_cv_cxx_compile_cxx11__std_cpp11=no
ax_cv_cxx_compile_cxx11__std_gnupp0x=no
ax_cv_cxx_compile_cxx11__std_gnupp11=no
ax_cv_cxx_compile_cxx11_pstd_cpp0x=no
ax_cv_cxx_compile_cxx11_pstd_cpp11=no
gcc_cv_prog_cmp_skip='cmp --ignore-initial=16 $$f1 $$f2'

## ----------------- ##
## Output variables. ##
## ----------------- ##

AR=''
AR_FOR_BUILD='$(AR)'
AR_FOR_TARGET=''
AR_PLUGIN_OPTION=''
AS=''
AS_FOR_BUILD='$(AS)'
AS_FOR_TARGET=''
AWK='mawk'
BISON=''
BUILD_CONFIG=''
CARGO='no'
CC='gcc'
CC_FOR_BUILD='$(CC)'
CC_FOR_TARGET=''
CFLAGS='-static-libgcc '
CFLAGS_FOR_BUILD=''
CFLAGS_FOR_TARGET=''
COMPILER_AS_FOR_TARGET=''
COMPILER_LD_FOR_TARGET=''
COMPILER_NM_FOR_TARGET=''
CONFIGURE_GDB_TK=''
CPPFLAGS=''
CPPFLAGS_FOR_BUILD=''
CPP_FOR_BUILD=''
CXX='g++'
CXXFLAGS='-static-libgcc '
CXXFLAGS_FOR_BUILD=''
CXXFLAGS_FOR_TARGET=''
CXX_FOR_BUILD='$(CXX)'
CXX_FOR_TARGET=''
DEBUG_PREFIX_CFLAGS_FOR_TARGET=''
DEFS=''
DLLTOOL=''
DLLTOOL_FOR_BUILD='$(DLLTOOL)'
DLLTOOL_FOR_TARGET=''
DSYMUTIL=''
DSYMUTIL_FOR_BUILD='$(DSYMUTIL)'
DSYMUTIL_FOR_TARGET=''
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EXEEXT=''
EXPECT=''
FLAGS_FOR_TARGET=''
FLEX=''
GCC_FOR_TARGET=''
GCC_SHLIB_SUBDIR=''
GDB_TK=''
GDC='no'
GDCFLAGS=''
GDC_FOR_BUILD='$(GDC)'
GDC_FOR_TARGET=''
GFORTRAN_FOR_BUILD='$(GFORTRAN)'
GFORTRAN_FOR_TARGET=''
GM2_FOR_TARGET=''
GNATBIND='no'
GNATMAKE='no'
GOC_FOR_BUILD='$(GOC)'
GOC_FOR_TARGET=''
HAVE_CXX11=''
HAVE_CXX11_FOR_BUILD=''
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_GDB_TK=''
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
LD=''
LDFLAGS='-static-libgcc '
LDFLAGS_FOR_BUILD=''
LDFLAGS_FOR_TARGET=''
LD_FOR_BUILD='$(LD)'
LD_FOR_TARGET=''
LEX=''
LIBOBJS=''
LIBS=''
LIPO=''
LIPO_FOR_TARGET=''
LN='ln'
LN_S='ln -s'
LTLIBOBJS=''
M4=''
MAINT=''
MAINTAINER_MODE_FALSE=''
MAINTAINER_MODE_TRUE=''
MAKEINFO=''
NM=''
NM_FOR_BUILD='$(NM)'
NM_FOR_TARGET=''
OBJCOPY=''
OBJCOPY_FOR_TARGET=''
OBJDUMP=''
OBJDUMP_FOR_TARGET=''
OBJEXT='o'
OTOOL=''
OTOOL_FOR_TARGET=''
PACKAGE_BUGREPORT=''
PACKAGE_NAME=''
PACKAGE_STRING=''
PACKAGE_TARNAME=''
PACKAGE_URL=''
PACKAGE_VERSION=''
PATH_SEPARATOR=':'
PGO_BUILD_GEN_CFLAGS=''
PGO_BUILD_LTO_CFLAGS=''
PGO_BUILD_USE_CFLAGS=''
PICFLAG=''
PKG_CONFIG_PATH='/tmp/pkgx.3c326cd3b76e2bee/pkgs/gnu.org/mpfr/v4.2.2/lib/pkgconfig:/tmp/pkgx.3c326cd3b76e2bee/pkgs/gnu.org/gmp/v6.3.0/lib/pkgconfig'
RANLIB=''
RANLIB_FOR_BUILD='$(RANLIB)'
RANLIB_FOR_TARGET=''
RANLIB_PLUGIN_OPTION=''
RAW_CXX_FOR_TARGET=''
READELF=''
READELF_FOR_TARGET=''
RPATH_ENVVAR=''
RUNTEST=''
SED='/bin/sed'
SHELL='/bin/bash'
STRIP=''
STRIP_FOR_TARGET=''
SYSROOT_CFLAGS_FOR_TARGET=''
TOPLEVEL_CONFIGURE_ARGUMENTS='/tmp/pkgx.3c326cd3b76e2bee/src/configure --prefix=/tmp/pkgx.3c326cd3b76e2bee/dst/gnu.org/gcc/libstdcxx/v14.2.0 --enable-languages=c,c++ --disable-multilib --disable-bootstrap --disable-nls --enable-default-pie --enable-pie-tools --enable-host-pie'
WINDMC=''
WINDMC_FOR_BUILD='$(WINDMC)'
WINDMC_FOR_TARGET=''
WINDRES=''
WINDRES_FOR_BUILD='$(WINDRES)'
WINDRES_FOR_TARGET=''
YACC=''
ac_ct_CC='gcc'
ac_ct_CXX='g++'
bindir='${exec_prefix}/bin'
build='x86_64-pc-linux-gnu'
build_alias=''
build_configargs=''
build_configdirs='build-libiberty build-libcpp build-texinfo build-flex build-bison build-m4 build-fixincludes'
build_cpu='x86_64'
build_libsubdir='build-x86_64-pc-linux-gnu'
build_noncanonical='x86_64-pc-linux-gnu'
build_os='linux-gnu'
build_subdir='build-x86_64-pc-linux-gnu'
build_tooldir=''
build_vendor='pc'
compare_exclusions=''
configdirs='gettext libiberty opcodes bfd readline tcl tk itcl libgui zlib libbacktrace libcpp libcody libdecnumber gmp mpfr mpc isl libiconv libctf libsframe libgrust texinfo flex bison binutils gas ld fixincludes gcc cgen sid sim gdb gdbserver gprof etc expect dejagnu m4 utils guile fastjar gnattools libcc1 gm2tools gotools c++tools gprofng'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
do_compare='cmp --ignore-initial=16 $$f1 $$f2'
docdir='${datarootdir}/doc/${PACKAGE}'
dvidir='${docdir}'
exec_prefix='NONE'
extra_host_libiberty_configure_flags=''
extra_host_zlib_configure_flags=''
extra_isl_gmp_configure_flags=''
extra_linker_plugin_configure_flags=''
extra_linker_plugin_flags=''
extra_mpc_gmp_configure_flags=''
extra_mpc_mpfr_configure_flags=''
extra_mpfr_configure_flags=''
gcc_host_pie=''
get_gcc_base_ver=''
gmpinc=''
gmplibs=''
host='x86_64-pc-linux-gnu'
host_alias=''
host_configargs=''
host_cpu='x86_64'
host_libs_picflag=''
host_noncanonical='x86_64-pc-linux-gnu'
host_os='linux-gnu'
host_pie=''
host_shared=''
host_subdir='.'
host_vendor='pc'
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
islinc=''
isllibs=''
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
oldincludedir='/usr/include'
pdfdir='${docdir}'
poststage1_ldflags=''
poststage1_libs=''
prefix='/tmp/pkgx.3c326cd3b76e2bee/dst/gnu.org/gcc/libstdcxx/v14.2.0'
program_transform_name='s,y,y,'
psdir='${docdir}'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
stage1_cflags=''
stage1_checking=''
stage1_languages=''
stage1_ldflags=''
stage1_libs=''
stage2_werror_flag=''
sysconfdir='${prefix}/etc'
target='x86_64-pc-linux-gnu'
target_alias=''
target_configargs=''
target_configdirs='target-libgcc target-libbacktrace target-libgloss target-newlib target-libgomp target-libatomic target-libitm target-libstdc++-v3 target-libsanitizer target-libvtv target-libssp target-libquadmath target-libgfortran target-libffi target-libobjc target-libada target-libgm2 target-libgo target-libgrust target-libphobos target-zlib target-rda'
target_cpu='x86_64'
target_noncanonical='x86_64-pc-linux-gnu'
target_os='linux-gnu'
target_subdir='x86_64-pc-linux-gnu'
target_vendor='pc'
tooldir=''

## ------------------- ##
## File substitutions. ##
## ------------------- ##

alphaieee_frag=''
host_makefile_frag='/dev/null'
ospace_frag=''
serialization_dependencies=''
target_makefile_frag=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME ""
#define PACKAGE_TARNAME ""
#define PACKAGE_VERSION ""
#define PACKAGE_STRING ""
#define PACKAGE_BUGREPORT ""
#define PACKAGE_URL ""

configure: exit 1
