#!/usr/bin/env -S pkgx -q deno^2 run --allow-read --allow-write --allow-env --allow-run

import { join, dirname, relative } from "jsr:@std/path@1";
import { convert } from "./pkg-convert-project";
import { stringify } from "jsr:@std/yaml@^1";

if (import.meta.main) {
  await main();
}

// Recursively walk a directory
async function* walkDir(path: string): AsyncGenerator<Deno.DirEntry & { path: string }> {
  for await (const entry of Deno.readDir(path)) {
    const fullPath = join(path, entry.name);
    if (entry.isDirectory) {
      yield* walkDir(fullPath);
    } else {
      yield { ...entry, path: fullPath };
    }
  }
}

// Timestamp-based rebuild logic
function needsRebuild(input: string, output: string): boolean {
  try {
    const inputStat = Deno.statSync(input);
    const outputStat = Deno.statSync(output);
    return inputStat.mtime! > (outputStat.mtime ?? 0);
  } catch {
    return true; // if output doesn't exist or error reading stats
  }
}

// Converts input package.yml to output path in artifacts/
function convertProject(input: string, output: string) {
  console.log('%c+', 'color: yellow', 'converting', input, 'â†’', output);

  const rv = convert(input);
  const txt = stringify(rv);
  Deno.mkdirSync(dirname(output), { recursive: true });
  Deno.writeTextFileSync(output, txt);
}

// main
export default async function main() {
  const SRCROOT = join(import.meta.dirname!, "..");
  const PROJECTS_DIR = join(SRCROOT, "projects");
  const OUTPUT_DIR = join(SRCROOT, "artifacts/pantry/projects");

  const artifactDir = join(SRCROOT, "artifacts/pantry");

  const pkgFiles: string[] = [];

  // Find all package.yml files recursively
  for await (const entry of walkDir(PROJECTS_DIR)) {
    if (entry.name === "package.yml") {
      pkgFiles.push(entry.path);
    }
  }

  for (const input of pkgFiles) {
    const rel = relative(PROJECTS_DIR, input);
    const output = join(OUTPUT_DIR, rel);
    if (needsRebuild(input, output)) {
      convertProject(input, output);
    }
  }

  if (pkgFiles.length > 0) {
    // Remove pantry.db files
    for (const entry of Deno.readDirSync(artifactDir)) {
      if (entry.name.startsWith("pantry.db") || /^pantry\..*\.db$/.test(entry.name)) {
        Deno.removeSync(join(artifactDir, entry.name));
      }
    }
  }
}
