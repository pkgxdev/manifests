#!/usr/bin/env -S pkgx -q deno^2 run --ext=ts -A

import { stringify, parse, Path, SemVer, undent, backticks_quiet, platform_partial_path, PackageRequirement } from "brewkit";
import { find_in_PATH } from "../brewkit/env-include.ts";
import parse_deps from "../brewkit/deps-env.ts";
import { fromFileUrl } from "jsr:@std/path@^1";
import ensure_pantry from "./pkg-convert";

if (import.meta.main) {
  const srcroot = new Path(fromFileUrl(import.meta.url)).parent().parent();

  await ensure_pantry();

  const pkg = parse_arg_to_pkg(Deno.args[0], srcroot);
  const tmpdir = Path.mktemp("d");
  const blddir = Deno.env.get("CI") ? Path.root.join("opt") : tmpdir.join("dst");
  const deno = find_in_PATH("deno")!.string;

  if (blddir.join(pkg.project).exists()) {
    throw new Error(`build directory already exists! ${blddir}`);
  }

  console.error("%cstage:", "color: yellow", tmpdir);
  console.error(
    "%cpkgspec:",
    "color: yellow",
    `${pkg.project}${pkg.constraint}`,
  );

  try {
    const env = await prep_toolchain(tmpdir, srcroot);
    const deps = await parse_deps(pkg, env);
    await prep_deps(deps, tmpdir, srcroot, env);
    await prep_script(pkg, tmpdir, srcroot);
    await run(pkg, tmpdir, srcroot, blddir, deno, env);
    await post(pkg, tmpdir, srcroot, blddir);

    if (!Deno.args.includes("--keep-stage")) {
      tmpdir.rm('rf');
    } else {
      console.error("%c!", "color:green", "keeping stage directory:", tmpdir);
    }
  } catch (e) {
    console.error("%c!", "color:green", "keeping stage directory:", tmpdir);
    throw e;
  }
}

async function prep_toolchain(tmpdir: Path, srcroot: Path) {
  const bin = tmpdir.join("bin");
  srcroot.join("brewkit/toolchain", Deno.build.os).cp({ to: bin });
  find_in_PATH("pkgx")!.cp({ into: bin });

  const env: Record<string, string> = {};

  const set = (key: string) => { if (Deno.env.get(key)) { env[key] = Deno.env.get(key)!; } }

  switch (Deno.build.os) {
  case 'linux':
    const llvm_bin = new Path(await backticks_quiet`pkgx -q +llvm.org -- which clang`).parent();
    const ln = (tool: string, llvm_tool: string) =>
      bin.join(tool).ln('s', { target: llvm_bin.join(llvm_tool) });
    ln('cc', 'clang');
    ln('gcc', 'clang');
    ln('clang', 'clang');
    ln('c++', 'clang++');
    ln('g++', 'clang++');
    ln('clang++', 'clang++');
    ln('cpp', 'clang-cpp');
    ln('ld', 'ld.lld');
    ln('ar', 'llvm-ar');
    ln('as', 'llvm-as');
    ln('nm', 'llvm-nm');
    ln('strings', 'llvm-strings');
    ln('ranlib', 'llvm-ranlib');

    env["PATH"] = `${bin}:/usr/bin:/bin:/usr/sbin:/sbin`;
    // stops ./configure from erroring in our container
    //TODO configure container to not be `root`
    env["FORCE_UNSAFE_CONFIGURE"] = "1";
    break;

  case 'darwin':
    env["PATH"] = `${bin}:/usr/bin:/bin:/usr/sbin:/sbin`;
    env["MACOSX_DEPLOYMENT_TARGET"] = "11.0";
    env["PKG_CONFIG_PATH"] = `${bin}/pkgconfig`;
    break;

  case 'windows':
    env["PATH"] = [bin.string, ...windows_default_PATH()].join(";");
    windows_system_keys().forEach(set);
    windows_vsvars_keys().forEach(set);
  }

  env["PKGX_BIN"] = bin.string;

  set("GITHUB_ACTIONS");
  set("GITHUB_TOKEN");

  return env;
}

async function prep_script(pkg: PackageRequirement, tmpdir: Path, srcroot: Path) {
  let src = "";
  const root = srcroot.join("projects", pkg.project);

  let foo: Path | undefined;
  if (foo = root.join("versions.ts").isFile()) {
    src += `import versions from "${foo.fileURL()}";\n`;
  } else {
    src += "import { default_versions } from 'brewkit';\n";
    src += `const versions = default_versions("${root.join("package.yml").fileURL()}");\n`;
  }
  if (foo = root.join("fixup.ts").isFile()) {
    src += `import process_fixup from "${foo.fileURL()}";\n`;
  } else {
    src += "const process_fixup = () => true;\n";
  }

  src += `import build from "${root.join("build.ts").fileURL()}";\n`;
  src += srcroot.join("brewkit/build-template.ts").read();

  tmpdir.join("run-build.ts").write(src);

  tmpdir.join("deno.json").write(
    `{"imports": {"brewkit": "${srcroot.join("brewkit/mod.ts").fileURL()}"}}`,
  );

  srcroot.join("deno.lock").cp({ into: tmpdir });
}

export async function prep_deps(pkgs: PackageRequirement[], tmpdir: Path, srcroot: Path, env: Record<string, string>) {
  env["PKGX_PANTRY_DIR"] = srcroot.join("artifacts/pantry/projects").cp({ into: tmpdir.join("pantry").mkdir() }).parent().string;
  env["PKGX_DIST_URL"] = "https://dist.pkgx.dev/v2";
  env["PKGX_DIR"] = tmpdir.join("pkgs").string;

  const json = await (async () => {

    // first we get/put deps in the checkout
    // then copy them into our build sandbox
    // this because we want a cache for local dev, but also need the built products for testing

    const json = await query_pkgx(pkgs, {
      ...env,
      PKGX_DIR: srcroot.join("artifacts", platform_partial_path()).string
    });

    if (!json) {
      return;
    }

    // first copy the deps into our build sandbox
    // we install to the pantry clone first for developer-efficiency reasons
    for (const [,pkg] of Object.entries(json.pkgs)) {
      const path = new Path(pkg.path);
      const dst = tmpdir.join("pkgs", path.relative({to: srcroot.join("artifacts", platform_partial_path())}));
      if (Deno.build.os == 'darwin') {
        // use macOS APFS super fast CoW copy
        const { success } = await new Deno.Command('cp', {args: ['-cR', path.string, dst.mkparent().string ]}).spawn().status;
        if (!success) throw new Error();
      } else {
        // slow but what else can you do? symlinks are fragile for our needs
        path.cp({ to: dst.mkparent() });
      }
      // vx symlinks or dynamic linkage rpaths break
      if (Deno.build.os != 'windows') {
        dst.parent().join(`v${new SemVer(pkg.version).major}`).ln('s', { target: dst.basename() });
      }
    }

    // redo getting the json with the build PKGX_DIR
    return await query_pkgx(pkgs, env)!;
  })();

  if (json) {
    const SEP = Deno.build.os == "windows" ? ";" : ":";

    for (const [key, paths] of Object.entries(json!.env) as [string, string[]][]) {
      if (env[key]) {
        env[key] = `${paths.join(SEP)}${SEP}${env[key]}`;
      } else {
        env[key] = paths.join(SEP);
      }
    }

    const keep = new Set();

    for (const [project, pkg] of Object.entries(json!.pkgs)) {
      for (const [key, value] of Object.entries(pkg.runtime_env ?? {} as Record<string, string>)) {
        let v = value.replace(`:$${key}`, `:${env[key]}`);
        v = v.replace(/:$/, "");
        env[key] = v;
      }
      keep.add(project);
    }

    env["PKGS"] = Object.values(json!.pkgs).map(({ path }: any) => path).join(SEP);
  }

  return env;
}

async function query_pkgx(deps: PackageRequirement[], env: Record<string, string>) {
  if (deps.length === 0) return;

  const plus = deps.map((dep) => {
    let str = stringify(dep);
    if (str.endsWith("*")) str = str.slice(0, -1); // pkgx^2 bug
    return `+${str}`;
  });

  const proc = new Deno.Command("pkgx", {
    args: ["--json=v2", "--quiet", ...plus],
    stdout: "piped",
    env
  }).spawn();

  const { success } = await proc.status;
  if (!success) {
    throw new Error("Fetching dependencies failed!");
  }

  const stdout = new TextDecoder().decode((await proc.output()).stdout);
  if (!stdout) return;
  return JSON.parse(stdout) as {
    env: Record<string, string[]>;
    pkgs: Record<string, {
      runtime_env: Record<string, string>;
      path: string;
      project: string;
      version: string;
      programs: string[];
    }>;
  }
}

async function run(pkg: PackageRequirement, tmpdir: Path, srcroot: Path, blddir: Path, deno: string, env: Record<string, string>) {
  let [cmd, ...args]: string[] = (() => {
    if (Deno.build.os !== 'darwin') return [deno];

    // Mono.framework contains libtiff and SOMEHOW cmake finds it

    let sb = undent`
      (version 1)
      (allow default)
      (deny file-write*
        (subpath "/opt/homebrew")
        (subpath "/usr/local"))
        (subpath "${tmpdir}/pkgs")
      (allow file-write*
        (subpath "${tmpdir}/pkgs/mesonbuild.com/v*/bin/python"))
      (deny file-read*
        (subpath "/opt/homebrew")
        (subpath "/usr/local")
        (subpath "/Library/Frameworks/Mono.framework"))
      (deny process-exec*
        (subpath "/opt/homebrew")
        (subpath "/usr/local"))
      `;

    let foo: Path | undefined;
    if (foo = srcroot.join("projects", pkg.project, "sandbox.sb").isFile()) {
      sb += foo.read();
    }
    if (foo = srcroot.join("projects", pkg.project, "sandbox.sb.in").isFile()) {
      sb += foo.read().replaceAll("{{prefix}}", blddir.join(pkg.project).string);
    }

    return ['sandbox-exec', '-f', tmpdir.join("sandbox.sb").write(sb).string, deno];
  })();

  //NOTE --allow-all is required for Windows, dunno why but whatever
  args.push(
    "run",
    "--quiet",
    "--allow-all",
    tmpdir.join("run-build.ts").string,
    `${pkg.project}${pkg.constraint.toString() == "*" ? "" : pkg.constraint}`,
    tmpdir.join("src").string,
    srcroot.join("projects", pkg.project).string,
    tmpdir.join("pkgs").string,
    blddir.string,
  );

  if (Deno.build.os == 'windows') {
    env["Path"] = env["PATH"];
    delete env["PATH"];
  }

  const proc = new Deno.Command(cmd, { args, env, clearEnv: true }).spawn();
  const { code, success } = await proc.status;
  if (!success) {
    Deno.exit(code);
  }
}

async function post(pkg: PackageRequirement, tmpdir: Path, srcroot: Path, blddir: Path) {
  const receipt = tmpdir.join("build-receipt.json");
  const version = new SemVer(JSON.parse(await receipt.read()).version);
  const root = srcroot.join("artifacts", platform_partial_path(), pkg.project).mkdir("p");
  const dstdir = root.join(`v${version}`).rm('rf');

  const needs_cp =
       Deno.build.os == "windows" && tmpdir.drive() != dstdir.drive()
    || Deno.build.os == 'linux' && Path.root.join(".dockerenv").isFile();

  if (needs_cp) {
    blddir.join(pkg.project, `v${version}`).cp({ to: dstdir });
    receipt.cp({ into: dstdir });
  } else {
    blddir.join(pkg.project, `v${version}`).mv({ to: dstdir.rm("rf") });
    receipt.mv({ into: dstdir });
  }

  if (Deno.build.os != 'windows') {
    dstdir.parent().join(`v${version.major}`).rm().ln("s", { target: dstdir.basename() });
  }

  // copy READMEs
  tmpdir.join("src/README").isFile()?.cp({ into: dstdir.parent() });
  for (const ext of "md markdown txt text rst".split(" ")) {
    tmpdir.join(`src/README.${ext}`).isFile()?.cp({ into: dstdir.parent() });
  }

  if (Deno.env.get("GITHUB_ENV")) {
    Deno.writeTextFileSync(Deno.env.get("GITHUB_ENV")!, `VERSION=${version}\n`, { append: true });
    Deno.writeTextFileSync(Deno.env.get("GITHUB_ENV")!, `PROJECT=${pkg.project}\n`, { append: true });
    Deno.writeTextFileSync(Deno.env.get("GITHUB_ENV")!, `PREFIX=${dstdir}\n`, { append: true });
    Deno.writeTextFileSync(Deno.env.get("GITHUB_ENV")!, `PLATFORM=${platform_partial_path()}\n`, { append: true });
  }
}

export function parse_arg_to_pkg(arg: string, srcroot: Path): PackageRequirement {
  const pkg = parse(arg);
  if (srcroot.join("projects", pkg.project).isDirectory()) {
    return pkg;
  } else {
    const raw = new Deno.Command("pkgx", {
      args: ["-qQ", pkg.project],
      env: { PKGX_PANTRY_DIR: srcroot.join("artifacts/pantry").string },
    }).outputSync();
    if (!raw.success) {
      console.error("no such pkg:", arg);
      Deno.exit(1);
    }
    const out = new TextDecoder().decode(raw.stdout).trim();
    if (out.split("\n").length > 1) {
      console.error("multiple pkgs found:", out.split("\n").join(" "));
      Deno.exit(1);
    }
    pkg.project = out
    return pkg;
  }
}

export function windows_default_PATH() {
  const rv = [
    "C:\\Windows\\System32",
    "C:\\Windows"
  ];

  const addons = Deno.env.get("PATH")?.split(";").filter(x => {
    if (x.includes("PowerShell\\")) return true;
    if (x.includes("Microsoft Visual Studio")) return true;
    if (x.includes("Microsoft SDKs\\")) return true;
    if (x.endsWith("HTML Help Workshop")) return true;
    if (x.includes("Windows Kits\\")) return true;
    if (x.includes("Microsoft.NET\\")) return true;
    return false;
  });

  return [...rv, ...(addons || [])];
}

export function windows_vsvars_keys() {
  return `
    __DOTNET_ADD_64BIT
    __DOTNET_PREFERRED_BITNESS
    __VSCMD_PREINIT_PATH
    CommandPromptType
    DevEnvDir
    ExtensionSdkDir
    EXTERNAL_INCLUDE
    Framework40Version
    FrameworkDir
    FrameworkDir64
    FrameworkVersion
    FrameworkVersion64
    FSHARPINSTALLDIR
    HTMLHelpDir
    IFCPATH
    INCLUDE
    is_x64_arch
    LIB
    LIBPATH
    NETFXSDKDir
    Platform
    UCRTVersion
    UniversalCRTSdkDir
    VCIDEInstallDir
    VCINSTALLDIR
    VCPKG_ROOT
    VCToolsInstallDir
    VCToolsRedistDir
    VCToolsVersion
    VisualStudioVersion
    VS170COMNTOOLS
    VSCMD_ARG_app_plat
    VSCMD_ARG_HOST_ARCH
    VSCMD_ARG_TGT_ARCH
    VSCMD_VER
    VSINSTALLDIR
    VSSDK150INSTALL
    VSSDKINSTALL
    WindowsLibPath
    WindowsSDK_ExecutablePath_x64
    WindowsSDK_ExecutablePath_x86
    WindowsSdkBinPath
    WindowsSdkDir
    WindowsSDKLibVersion
    WindowsSdkVerBinPath
    WindowsSDKVersion
  `.split(/\s+/).filter((x) => x.length > 0);
}

export function windows_system_keys() {
  return [
    "SystemRoot",
    "WINDIR",
    "LOCALAPPDATA",
    "APPDATA",
    "USERPROFILE",
    "COMSPEC",
    "PATHEXT",
  ]
}
