#!/usr/bin/env -S pkgx -q deno^2 run --ext=ts -A

import { fromFileUrl } from "jsr:@std/path@^1";
import { backticks_quiet, parse, Path, platform_partial_path, undent } from "brewkit";
import { find_in_PATH } from "../brewkit/env-include.ts";
import { setup_deps } from "./pkg-build";

const pkg = parse(Deno.args[0]);
const srcroot = new Path(fromFileUrl(import.meta.url)).parent().parent();
const tmpdir = mktempd();
const deno = find_in_PATH("deno")!.string;

Deno.env.set("PKGX_PANTRY_DIR", srcroot.join("artifacts/pantry/projects").cp({ into: tmpdir.join("pantry").mkdir() }).parent().string);
Deno.env.set("PKGX_DIST_URL", "https://dist.pkgx.dev/v2");

await prep_toolchain();
const { prefix, version } = await prep_deps();
await prep_script();
await run();

tmpdir.rm('rf');

///////////////////////////////////////////////////////////////////////////////

async function prep_toolchain() {
  const bin = tmpdir.join("bin").mkdir();
  find_in_PATH("pkgx")!.cp({ into: bin });

  switch (Deno.build.os) {
  case 'linux':
    const llvm_bin = new Path(backticks_quiet`pkgx -q +llvm.org -- which clang`).parent();
    const ln = (tool: string, llvm_tool: string) =>
      bin.join(tool).ln('s', { target: llvm_bin.join(llvm_tool) });
    ln('cc', 'clang');
    ln('c++', 'clang++');
    ln('gcc', 'clang');
    ln('g++', 'clang++');
    ln('cpp', 'clang-cpp');
    ln('ld', 'ld.lld');
    ln('ar', 'llvm-ar');
    ln('as', 'llvm-as');
    ln('nm', 'llvm-nm');
    ln('strings', 'llvm-strings');

    Deno.env.set("PATH", `${bin}:/usr/bin:/bin:/usr/sbin:/sbin`);
    break;

  case 'darwin':
    srcroot.join("brewkit/toolchain/darwin/cc").cp({ into: bin });
    srcroot.join("brewkit/toolchain/darwin/c++").cp({ into: bin });
    srcroot.join("brewkit/toolchain/darwin/ld").cp({ into: bin });
    srcroot.join("brewkit/toolchain/darwin/pkg-config").cp({ into: bin });

    Deno.env.set("PATH", `${bin}:/usr/bin:/bin:/usr/sbin:/sbin`);
    break;

  case 'windows':
    Deno.env.set("PATH", `${bin};${Deno.env.get("PATH")}`);
  }

  Deno.env.set("PKGX_BIN", bin.string);
}

async function prep_deps() {
  await setup_deps(tmpdir, srcroot)

  Deno.env.set("PKGX_DIR", tmpdir.join("pkgs").string);

  const data = backticks_quiet`pkgx -q +${pkg.project} --json=v1`;
  const json = JSON.parse(data);

  if (json) {
    const SEP = Deno.build.os == "windows" ? ";" : ":";

    for (const [key, paths] of Object.entries(json.env) as [string, string[]][]) {
      let value = paths.join(SEP);
      if (Deno.env.get(key)) {
        value += `${SEP}${Deno.env.get(key)}`;
      }
      Deno.env.set(key, value);
    }

    for (const [_pkg, env_dict] of Object.entries(json.runtime_env)) {
      for (let [key, value] of Object.entries(env_dict as any)) {
        const { path } = json.pkgs.find(({ project }: any) => project === _pkg);
        value = (value as string).replace("{{prefix}}", path);
        Deno.env.set(key, value as string);
      }
    }

    for (const [project, env_keys] of Object.entries(json.runtime_env as any)) {
      for (let [key, value] of Object.entries(env_keys as any)) {
        const { path, version } = json.pkgs.find(({ project: _project }: any) => project === _project);
        //TODO pkgx should obv replace these, which presumably means going to v2 :/
        value = (value as string).replaceAll("{{prefix}}", path);
        value = (value as string).replaceAll("{{version}}", version);
        Deno.env.set(key, value as string);
      }
    }

    const pkgs = Object.values(json.pkgs).map(({ path }: any) => path);
    Deno.env.set("PKGS", pkgs.join(SEP));

    const { path: prefix, version }= json.pkgs.find(({ project }: any) => project === pkg.project);
    return { prefix, version } as { prefix: string, version: string };
  } else {
    console.error("no such pkg or some such");
    Deno.exit(1);
  }}

async function prep_script() {
  const data = undent`
    import test_runner from '${srcroot.join("projects", pkg.project, "test.ts").fileURL()}';
    import { Path, SemVer } from 'brewkit';
    const prefix = new Path(Deno.args[0]);
    const version = new SemVer(prefix.basename());
    await test_runner({prefix, version});
  `;
  tmpdir.join("run-test.ts").write(data);

  tmpdir.join("deno.json").write(
    `{"imports": {"brewkit": "${srcroot.join("brewkit/mod.ts").fileURL()}"}}`,
  );

  srcroot.join("deno.lock").cp({ into: tmpdir });

  for await (const [path, {name}] of srcroot.join("projects", pkg.project).ls()) {
    switch (name) {
    case "sandbox.sb":
    case "sandbox.sb.in":
    case "package.yml":
    case "build.ts":
    case "test.ts":
    case "versions.ts":
    case "fixup.ts":
      break;
    default:
      path.cp({ into: tmpdir.join("testbed").mkdir() });
    }
  }
}

async function run() {
  let [cmd, ...args]: string[] = (() => {
    if (Deno.build.os !== 'darwin') return [deno];

    let sb = undent`
      (version 1)
      (allow default)
      (deny file-write*
        (subpath "/opt/homebrew")
        (subpath "${srcroot}")
        (subpath "/usr/local"))
      (deny file-read*
        (subpath "/opt/homebrew")
        (subpath "/usr/local"))
      (deny process-exec*
        (subpath "/opt/homebrew")
        (subpath "/usr/local"))

      `;

    let foo: Path | undefined;
    if (foo = srcroot.join("projects", pkg.project, "sandbox.sb").isFile()) {
      sb += foo.read() + "\n";
    }
    if (foo = srcroot.join("projects", pkg.project, "sandbox.sb.in").isFile()) {
      // we have to resolve the symlink as macOS sandboxes resolve symlinks before denying shit
      //NOTE we symlink all pkgs because copying them all can take ~30s depending on dep quantity
      //FIXME maybe we should cp the target package, if so update the sandbox above to prevent writes there
      const rel_path = new Path(prefix).relative({to: tmpdir.join("pkgs") });
      const path = srcroot.join("artifacts", platform_partial_path(), rel_path);
      sb += foo.read().replaceAll("{{prefix}}", path.string);
    }

    return ['sandbox-exec', '-f', tmpdir.join("sandbox.sb").write(sb).string, deno];
  })();

  if (Deno.env.get("GITHUB_ACTIONS")) {
    console.log("::group::env");
    console.log(Deno.env.toObject());
    console.log("::endgroup::");
  }

  //NOTE --allow-all is required for Windows, dunno why but whatever
  args.push(
    "run",
    "-qRW",
    "--allow-env",
    "--allow-net",
    "--allow-run",
    tmpdir.join("run-test.ts").string,
    prefix,
    version
  );

  const proc = new Deno.Command(cmd, { args, cwd: tmpdir.join("testbed").mkdir().string }).spawn();
  const { code, success } = await proc.status;
  if (!success) {
    Deno.exit(code);
  }
}

function mktempd() {
  const dir = Deno.build.os == 'darwin' ? '/tmp' : undefined;
  return new Path(Deno.makeTempDirSync({ prefix: "pkgx.", dir }));
}

function platform_pair() {
  return [Deno.build.os, Deno.build.arch == 'x86_64' ? 'x86-64' : Deno.build.arch];
}