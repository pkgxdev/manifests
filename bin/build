#!/bin/bash

set -exo pipefail

SRCROOT="$(cd "$(dirname "$0")"/.. && pwd)"
PROJECT="$1"

if [ $(uname) = Darwin ]; then
  # more readable paths (thanks anyway Apple)
  cd "$(mktemp -d /tmp/pkgx.build.XXXXXX)"
else
  cd "$(mktemp -d -t pkgx.build.XXXXXX)"
fi

mkdir -p .pkgx/bin

echo "import versions from '$SRCROOT/projects/$PROJECT/versions.ts';" > .pkgx/go.ts
echo "import build from '$SRCROOT/projects/$PROJECT/build.ts';" >> .pkgx/go.ts
cat "$SRCROOT/lib/build-template.ts" >> .pkgx/go.ts
echo "{\"imports\": {\"brewkit\": \"$SRCROOT/lib/mod.ts\"}}" > .pkgx/deno.json

deno="$(/usr/local/bin/pkgx +deno^2.1 -- which deno)"
jq=jq

cp "$(which pkgx)" .pkgx/bin

export PATH="$PWD/.pkgx/bin:/usr/bin:/bin:/usr/sbin:/sbin"

case $(uname) in
Linux)
  cp $SRCROOT/bin/toolchain/* .pkgx/bin
  # these must be symlinks or it doesnâ€™t work
  ln -s "$(pkgx +llvm.org -- which clang)" .pkgx/bin/cc
  ln -s "$(pkgx +llvm.org -- which clang)" .pkgx/bin/gcc
  ln -s "$(pkgx +llvm.org -- which clang++)" .pkgx/bin/cc
  ln -s "$(pkgx +llvm.org -- which clang++)" .pkgx/bin/g++
  ln -s "$(pkgx +llvm.org -- which clang-cpp)" .pkgx/bin/cpp
  ln -s "$(pkgx +llvm.org -- which ld.lld)" .pkgx/bin/ld
  ln -s "$(pkgx +llvm.org -- which ld.lld)" .pkgx/bin/ld.lld
  ln -s "$(pkgx +llvm.org -- which lld-link)" .pkgx/bin/lld-link
  ln -s "$(pkgx +llvm.org -- which llvm-ar)" .pkgx/bin/ar
  ln -s "$(pkgx +llvm.org -- which llvm-as)" .pkgx/bin/as
  ln -s "$(pkgx +llvm.org -- which llvm-nm)" .pkgx/bin/nm
  ln -s "$(pkgx +llvm.org -- which llvm-objcopy)" .pkgx/bin/objcopy
  ln -s "$(pkgx +llvm.org -- which llvm-ranlib)" .pkgx/bin/ranlib
  ln -s "$(pkgx +llvm.org -- which llvm-readelf)" .pkgx/bin/readelf
  ln -s "$(pkgx +llvm.org -- which llvm-strings)" .pkgx/bin/strings
  ln -s "$(pkgx +llvm.org -- which llvm-strip)" .pkgx/bin/strip
  jq="pkgx jq"
  ;;

Darwin)
  # prevent build scripts from dipping into Homebrew or /usr/local
  cat <<EoSB > .pkgx/sandbox.sb
(version 1)
(allow default)
(deny file-read* (subpath "/opt/homebrew"))
(deny file-read* (subpath "/usr/local"))
(allow file-read* (subpath "/usr/local/bin"))
EoSB
  # ^^ allow /usr/local/bin or native-tls fails inside hyper inside pkgx
  deno="sandbox-exec -f .pkgx/sandbox.sb $deno"
  ;;
esac

set -a
eval "$($SRCROOT/bin/private/deps-env.ts $PROJECT)"
set +a

# we need full allow-read and write because Deno.symlink sucks
# TODO make our own implementation

# we need full --allow-env to allow build scripts to set environment
# TODO they can do this some other way!

$deno run \
  --quiet \
  --allow-read \
  --allow-run \
  --allow-env \
  --allow-write \
  --allow-net \
  --ext=ts \
  .pkgx/go.ts \
  "$PROJECT" \
  "$PWD" \
  "$SRCROOT/projects/$PROJECT"

PROJECT=$(cat .pkgx/build-receipt.json | $jq -r .project)
VERSION=$(cat .pkgx/build-receipt.json | $jq -r .version)
PLATFORM=$(cat .pkgx/build-receipt.json | $jq -r .platform_triple)

if [ -f "$GITHUB_ENV" ]; then
  echo "VERSION=$VERSION" >> $GITHUB_ENV
  echo "PROJECT=$PROJECT" >> $GITHUB_ENV
  echo "PREFIX=$SRCROOT/products/$PLATFORM/$PROJECT/v$VERSION" >> $GITHUB_ENV
  echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
fi

rm -rf "$SRCROOT/products/$PLATFORM/$PROJECT/v$VERSION"
mkdir -p "$SRCROOT/products/$PLATFORM/$PROJECT"
mv "$PWD/.pkgx/$PROJECT"/* "$SRCROOT/products/$PLATFORM/$PROJECT"

rm -rf "$SRCROOT/builds/$PLATFORM/$PROJECT/v$VERSION"
mkdir -p "$SRCROOT/builds/$PLATFORM/$PROJECT"
mv "$PWD" "$SRCROOT/builds/$PLATFORM/$PROJECT/v$VERSION"
mv "$SRCROOT/builds/$PLATFORM/$PROJECT/v$VERSION/.pkgx/build-receipt.json" "$SRCROOT/builds/$PLATFORM/$PROJECT/v$VERSION"
rm -rf "$SRCROOT/builds/$PLATFORM/$PROJECT/v$VERSION/.pkgx"
