#!/usr/bin/env -S pkgx -q deno^2 run --ext=ts --allow-run --allow-read --allow-env=HOME,GITHUB_TOKEN

import { Path, backticks_quiet, platform_partial_path } from "brewkit";
import { fromFileUrl } from "jsr:@std/path@^1.0.8/from-file-url";
import pkg_status from "./pkg-status";
import { expandGlob, expandGlobSync } from "jsr:@std/fs@1/expand-glob";

let { cmd, flags, projects } = (() => {
  const flags: string[] = [];
  const args: string[]= [];
  for (const arg of Deno.args.slice(1)) {
    if (arg.startsWith("-")) {
      flags.push(arg);
    } else {
      args.push(arg);
    }
  }
  return {cmd: Deno.args[0], projects: args, flags};
})();

if (!cmd) {
  console.error("usage: pkg [build|test|convert] <pkgspec>");
  console.error("usage: pkg [btcd] <pkgspec...>");
  console.error("usage: pkg a[btcd]");
  console.error("usage: pkg build [--keep-stage] <pkgspec>");
  Deno.exit(1);
}

let opts = new Set();
const srcroot = new Path(fromFileUrl(new URL("..", import.meta.url)));

//FIXME excessive and insecure
if (!Deno.env.get("GITHUB_TOKEN") && Path.home().join(".pkgx/cli.github.com").isDirectory()) {
  const data = new Deno.Command("gh", {args: ["auth", "token"]}).outputSync().stdout;
  Deno.env.set("GITHUB_TOKEN", new TextDecoder().decode(data).trim());
}

if (new Path(subcmd(cmd)).isExecutableFile()) {
  const foo = subcmd(cmd);
  if (cmd != "build" && cmd != "test") {
    await run([foo, ...Deno.args.slice(1)]);
  } else if (projects.length == 1) {
    await run([foo, ...flags]);
  } else for (const pkgspec of projects) {
    await run([foo, pkgspec, ...flags]);
  }
  Deno.exit(0);
}

const args = [];
opts = decompose(cmd);

if (opts.has('convert')) {
  await run([subcmd('convert')]);
}

if (opts.has('docker')) {
  args.unshift('docker', 'run', '--rm', '-it', '-v', `${srcroot}:/work`, '-w', '/work', '-e', 'GITHUB_TOKEN', 'ghcr.io/pkgxdev/bldbot')
}

projects = (() => {
  if (opts.has('all')) {
    const projects = backticks_quiet`${subcmd("ls")}`.split(/\s+/);
    const rv = []
    for (const project of projects) {
      let add = true
      for (const _ of expandGlobSync(`${srcroot.join("artifacts", platform_partial_path(), project)}/v*`)) {
        add = false;
        break;
      }
      if (add) rv.push(project);
    }
    return rv;
  } else if (projects.length == 0) {
    return [...pkg_status()[0]];
  } else {
    return projects;
  }
})()

for (const project of projects) {
  if (opts.has('build')) {
    await run([...args, subcmd('build'), project, ...flags]);
  }
  if (opts.has('test')) {
    await run([...args, subcmd('test'), project, ...flags]);
  }
}

async function run(input: (string | Path)[]) {
  const cmd = input[0].toString();
  const args = input.slice(1).map(a => a.toString());
  const { success, code } = await new Deno.Command(cmd, {args}).spawn().status
  if (!success) Deno.exit(code);
}

function subcmd(cmd: string) {
  if (opts.has('docker')) {
    return `/work/bin/pkg-${cmd}`;
  } else {
    if (Deno.build.os == "windows") {
      cmd = `${cmd}.cmd`;
    }
    return srcroot.join('bin', `pkg-${cmd}`).string;
  }
}

function decompose(cmd: string) {
  const rv = []
  for (const c of cmd) {
    switch (c) {
    case 'b': rv.push('build'); break;
    case 't': rv.push('test'); break;
    case 'c': rv.push('convert'); break;
    case 'd': rv.push('docker'); break;
    case 'a': rv.push("all"); break;
    default:
      console.error("invalid mode:", c);
      Deno.exit(1);
    }
  }
  return new Set(rv);
}
