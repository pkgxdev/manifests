#!/usr/bin/env -S pkgx --quiet deno^2 run -A

import default_versions from "../brewkit/default-versions.ts";
import { Path, Range, SemVer } from "brewkit";
import pkg_ls from "./pkg-ls";

const srcroot = new Path(import.meta.dirname!).parent();

for await (const project of ls()) {
  const [released_versions, existing_versions] = await Promise.all([
    get_released_versions(project),
    get_existing_versions(project)
  ]);

  const greatest_existing_version = existing_versions.sort().pop() ?? new SemVer([0,0,0]);
  const greatest_released_version = released_versions.map(({ version }) => version).sort().pop()

  if (!greatest_released_version) {
    console.error(`no released versions found for ${project}`);
    continue;
  }

  if (greatest_released_version.gt(greatest_existing_version)) {
    const out = `${project}=${greatest_released_version}`;
    if (Deno.env.get("GITHUB_OUTPUT")) {
      Deno.writeTextFileSync(Deno.env.get("GITHUB_OUTPUT")!, `pkgspec=${out}`, { append: true });
    }
    console.log(out);
    Deno.exit(0);
  }
}

console.error("nothing new");

async function get_released_versions(project: string): Promise<{ version: SemVer }[]> {
  const yaml = srcroot.join("projects", project, "package.yml");
  const f = srcroot.join("projects", project, "versions.ts").isFile();
  if (f) {
    const { default: versions } = await import(f.string);
    return versions(new Range("*"));
  } else {
    return default_versions(yaml.fileURL().toString())(new Range("*"));
  }
}

async function get_existing_versions(project: string) {
  //FIXME shouldn't be platform specific
  for (const platform of ["darwin/aarch64", "linux/x86-64", "windows/x86-64"]) {
    try {
      const rsp = await fetch(`https://dist.pkgx.dev/v2/${project}/${platform}/versions.txt`);
      const txt = await rsp.text();
      return txt.split("\n").filter(x => x).map(line => new SemVer(line));
    } catch {
      // noop
    }
  }
  console.error(`failed to fetch any existing versions for ${project}`);
  return [];
}

async function *ls() {
  if (Deno.args.length) {
    for (const arg of Deno.args) {
      yield arg;
    }
  } else for await (const project of pkg_ls()) {
      yield project;
  }
}