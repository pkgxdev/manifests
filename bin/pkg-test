#!/usr/bin/env -S pkgx -q deno^2 run --ext=ts -A

import { Installation } from "https://raw.githubusercontent.com/pkgxdev/libpkgx/refs/tags/v0.21.0/mod.ts";
import { backticks_quiet, Path, platform_partial_path, undent, walk_pkgx_dir } from "brewkit";
import { parse_arg_to_pkg, prep_deps, windows_default_PATH, windows_system_keys, windows_vsvars_keys } from "./pkg-build";
import { find_in_PATH } from "../brewkit/env-include.ts";
import { fromFileUrl } from "jsr:@std/path@^1";
import ensure_pantry from "./pkg-convert";

if (import.meta.main) {
  const srcroot = new Path(fromFileUrl(import.meta.url)).parent().parent();

  await ensure_pantry();

  const pkg = parse_arg_to_pkg(Deno.args[0], srcroot);
  const tmpdir = mktempd();
  const deno = find_in_PATH("deno")!.string;

  const env = await prep_toolchain(srcroot, tmpdir);
  await prep_deps([pkg], tmpdir, srcroot, env);

  const installation: Installation = await (async () => {
    for await (const { pkg: dep, path } of walk_pkgx_dir(tmpdir.join("pkgs"))) {
      if (dep.project == pkg.project) return { path, pkg: dep };
    }
    throw new Error();
  })() as any;

  await prep_script(srcroot, installation, tmpdir);
  await run(deno, srcroot, installation, tmpdir, env);

  tmpdir.rm('rf');
}

///////////////////////////////////////////////////////////////////////////////

async function prep_toolchain(srcroot: Path, tmpdir: Path) {
  const bin = tmpdir.join("bin").mkdir();
  find_in_PATH("pkgx")!.cp({ into: bin });

  const env: Record<string, string> = {}

  const set = (key: string) => { if (Deno.env.get(key)) { env[key] = Deno.env.get(key)!; } }

  switch (Deno.build.os) {
  case 'linux':
    const llvm_bin = new Path(backticks_quiet`pkgx -q +llvm.org -- which clang`).parent();
    const ln = (tool: string, llvm_tool: string) =>
      bin.join(tool).ln('s', { target: llvm_bin.join(llvm_tool) });
    ln('cc', 'clang');
    ln('c++', 'clang++');
    ln('gcc', 'clang');
    ln('g++', 'clang++');
    ln('cpp', 'clang-cpp');
    ln('ld', 'ld.lld');
    ln('ar', 'llvm-ar');
    ln('as', 'llvm-as');
    ln('nm', 'llvm-nm');
    ln('strings', 'llvm-strings');

    env["PATH"] = `${bin}:/usr/bin:/bin:/usr/sbin:/sbin`;
    srcroot.join("brewkit/toolchain/linux/pkg-config").cp({ into: bin });
    break;

  case 'darwin':
    srcroot.join("brewkit/toolchain/darwin/cc").cp({ into: bin });
    srcroot.join("brewkit/toolchain/darwin/c++").cp({ into: bin });
    srcroot.join("brewkit/toolchain/darwin/ld").cp({ into: bin });
    srcroot.join("brewkit/toolchain/darwin/pkg-config").cp({ into: bin });

    env["PATH"] = `${bin}:/usr/bin:/bin:/usr/sbin:/sbin`;
    break;

  case 'windows':
    env["PATH"] = [bin.string, ...windows_default_PATH()].join(";");
    windows_system_keys().forEach(set);
    windows_vsvars_keys().forEach(set);
  }

  env["PKGX_BIN"] = bin.string;

  return env;
}

async function prep_script(srcroot: Path, { pkg }: Installation, tmpdir: Path) {
  const data = undent`
    import test_runner from '${srcroot.join("projects", pkg.project, "test.ts").fileURL()}';
    import { Path, SemVer } from 'brewkit';
    const prefix = new Path(Deno.args[0]);
    const version = new SemVer(prefix.basename());

    if (Deno.env.get("GITHUB_ACTIONS")) {
      console.log("::group::env");
      Object.entries(Deno.env.toObject()).forEach(([key, value]) => console.log(\`\${key}=\${value}\`));
      console.log("::endgroup::");
    }

    await test_runner({prefix, version});
  `;
  tmpdir.join("run-test.ts").write(data);

  tmpdir.join("deno.json").write(
    `{"imports": {"brewkit": "${srcroot.join("brewkit/mod.ts").fileURL()}"}}`,
  );

  srcroot.join("deno.lock").cp({ into: tmpdir });

  for await (const [path, {name}] of srcroot.join("projects", pkg.project).ls()) {
    switch (name) {
    case "sandbox.sb":
    case "sandbox.sb.in":
    case "package.yml":
    case "build.ts":
    case "test.ts":
    case "versions.ts":
    case "fixup.ts":
      break;
    default:
      path.cp({ into: tmpdir.join("testbed").mkdir() });
    }
  }
}

async function run(deno: string, srcroot: Path, { path: prefix, pkg }: Installation, tmpdir: Path, env: Record<string, string>) {
  let [cmd, ...args]: string[] = (() => {
    if (Deno.build.os !== 'darwin') return [deno];

    let sb = undent`
      (version 1)
      (allow default)
      (deny file-write*
        (subpath "/opt/homebrew")
        (subpath "${srcroot}")
        (subpath "/usr/local"))
        (subpath "${Path.home()}")
      (deny file-read*
        (subpath "/opt/homebrew")
        (subpath "/usr/local"))
      (deny process-exec*
        (subpath "/opt/homebrew")
        (subpath "/usr/local"))
      `;

    let foo: Path | undefined;
    if (foo = srcroot.join("projects", pkg.project, "sandbox.sb").isFile()) {
      sb += foo.read() + "\n";
    }
    if (foo = srcroot.join("projects", pkg.project, "sandbox.sb.in").isFile()) {
      // we have to resolve the symlink as macOS sandboxes resolve symlinks before denying shit
      //NOTE we symlink all pkgs because copying them all can take ~30s depending on dep quantity
      //FIXME maybe we should cp the target package, if so update the sandbox above to prevent writes there
      const rel_path = prefix.relative({to: tmpdir.join("pkgs") });
      const path = srcroot.join("artifacts", platform_partial_path(), rel_path);
      sb += foo.read().replaceAll("{{prefix}}", path.string);
    }

    return ['sandbox-exec', '-f', tmpdir.join("sandbox.sb").write(sb).string, deno];
  })();

  if (Deno.env.get("GITHUB_ACTIONS")) {
    env["GITHUB_ACTIONS"] = Deno.env.get("GITHUB_ACTIONS")!;
  }

  env["HOME"] = tmpdir.join("home").mkdir().string;

  //NOTE --allow-all is required for Windows, dunno why but whatever
  args.push(
    "run",
    "-qRW",
    "--allow-env",
    "--allow-net",
    "--allow-run",
    tmpdir.join("run-test.ts").string,
    prefix.string,
    pkg.version.toString(),
  );

  const cwd = tmpdir.join("testbed").mkdir().string;
  const proc = new Deno.Command(cmd, { args, env, cwd, clearEnv: true }).spawn();
  const { code, success } = await proc.status;
  if (!success) {
    Deno.exit(code);
  }
}

function mktempd() {
  const dir = Deno.build.os == 'darwin' ? '/tmp' : undefined;
  return new Path(Deno.makeTempDirSync({ prefix: "pkgx.", dir }));
}
