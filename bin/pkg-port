#!/usr/bin/env -S pkgx deno run -A

import { hooks } from "https://deno.land/x/libpkgx@v0.21.0/mod.ts";
import { fromFileUrl } from "jsr:@std/path@1/from-file-url";
import { parse, stringify } from "jsr:@std/yaml@1";
import { Path, undent } from "brewkit";

const d = new Path(fromFileUrl(import.meta.url)).parent().parent();

if (Deno.args.length < 1) {
  console.error("usage: pkg port <package-name>");
  console.error("usage: pkg port ...");
  Deno.exit(1);
}

if (Deno.args[0] == '...') {
  const map: Record<string, number> = {};
  const deps_count: Record<string, number> = {};
  const reverseGraph: Record<string, Set<string>> = {};

  for await (const { project: og_project } of hooks.usePantry().ls()) {
    const project = map_project_name(og_project);
    if (!project) continue;
    if (d.join("projects", project, "package.yml").isFile()) continue;

    const pkg = hooks.usePantry().project(og_project);
    const deps = (await (async () => {
      const yaml = (await pkg.yaml()).dependencies as Record<string, any>;
      const rv: string[] = [];
      for (const [project, o] of Object.entries(yaml ?? {})) {
        switch (project) {
          case 'linux':
          case 'linux/x86-64':
          case 'linux/aarch64':
            continue; // skip linux only deps for now
          case 'darwin':
          case 'darwin/x86-64':
          case 'darwin/aarch64':
            for (const [project] of Object.entries(o)) {
              rv.push(project);
            }
            break;
          default:
            rv.push(project);
        }
      }
      return rv;
    })()).filter((dep) => {
      const project = map_project_name(dep);
      return project && !d.join("projects", project, "package.yml").isFile()
    });

    for (const dep of deps) {
      reverseGraph[dep] ??= new Set();
      reverseGraph[dep].add(project);
    }

    deps_count[project] = deps.length;
    for (const dep of deps) {
      map[dep] ??= 0;
      map[dep] += 1;
    }
  }

  function countTransitiveDependents(pkg: string, visited = new Set<string>()): number {
    if (visited.has(pkg)) return 0;
    visited.add(pkg);
    let count = 0;
    for (const dependent of reverseGraph[pkg] ?? []) {
      count += 1 + countTransitiveDependents(dependent, visited);
    }
    return count;
  }

  const importance: Record<string, number> = {};
  for (const pkg of Object.keys(map)) {
    importance[pkg] = countTransitiveDependents(pkg);
  }

  for (const [project, count] of Object.entries(importance).sort((a, b) => a[1] - b[1])) {
    console.log(`${project}: ${count}`);
  }

  Deno.exit(0);
}

const project = Deno.args[0];
const new_project = Deno.args[1] || project;

let f = Path.home().join("src/pantry/projects", project, "package.yml").isFile();
if (!f) {
  console.error(`project ${project} or pantry not found`);
  Deno.exit(1);
}
const yaml = parse(f.read()) as any;
const old_f = f;
f = d.join("projects", new_project).mkdir('p').join("package.yml");

const new_yaml: Record<string, any> = {}

if (yaml['display-name']) {
  new_yaml['name'] = yaml['display-name'];
}

let repository = yaml['distributable']?.['url']
if (repository?.startsWith('https://github.com')) {
  const url = new URL(repository);
  repository = `https://github.com/${url.pathname.split('/').slice(1, 3).join('/')}`;
  new_yaml.repository = repository;
} else if (yaml.versions?.github) {
  new_yaml.repository = `https://github.com/${yaml.versions.github.split('/').slice(0, 2).join('/')}`;
}

new_yaml.platforms = yaml['platforms'] || ['darwin/aarch64', 'linux/x86-64'];

if (yaml.provides) {
  new_yaml.programs = yaml['provides'];
}

if (yaml['dependencies']) {
  const deps: Record<string, string> = {};
  for (let [project, constraint] of Object.entries(yaml['dependencies']) as [string, string | number][]) {
    if (typeof constraint == 'number') { constraint = '^' + constraint; }
    if (project == 'libexpat.github.io') {
      project = 'github.com/libexpat';
    }
    if (project == 'github.com/gflags/gflags') {
    project = 'google.com/gflags';
    }
    deps[project] = constraint;
  }
  new_yaml.dependencies = deps;
}

f.write(stringify(new_yaml));

const build = stringify(yaml['build'])
  .trim()
  .replaceAll(/^/mg, '// ')
  .replaceAll(/\$?{{\s*prefix\s*}}/g, '${prefix}')
  .replaceAll(/{{\s*hw.concurrency\s*}}/g, '${navigator.hardwareConcurrency}');

const url = yaml['distributable']?.['url']
  ?.replaceAll(/{{\s*version\s*}}/g, '${version}')
  .replaceAll(/{{\s*tag\s*}}/g, '${tag}')
  .replaceAll(/{{\s*version\.major\s*}}/g, '${version.major}')
  .replaceAll(/{{\s*version\.minor\s*}}/g, '${version.minor}')
  .replaceAll(/{{\s*version\.patch\s*}}/g, '${version.patch}')
  .replaceAll(/{{\s*version\.raw\s*}}/g, '${tag}')
  .replaceAll(/{{\s*version\.marketing\s*}}/g, '${version.marketing}');

f.parent().join("build.ts").write(undent`
  import { BuildOptions, unarchive, run } from "brewkit";

  export default async function ({ prefix, version, deps, tag, props }: BuildOptions) {
    await unarchive(\`${url}\`);
    ${build}
  }`);

const test = stringify(yaml['test']).replaceAll(/^/mg, '// ');

f.parent().join("test.ts").write(undent`
  import { run } from "brewkit";

  export default async function () {
    ${test}
  }`);

for await (const [path, { name, isFile }] of old_f.parent().ls()) {
  if (name == 'package.yml') continue;
  if (!isFile) continue;
  path.cp({ into: f.parent() });
}

await new Deno.Command("code", {
  args: [
    d.join("projects", new_project).string,
    Path.home().join("src/pantry/projects", project).string,
    d.string,
    d.join("projects", new_project, "package.yml").string
  ],
}).spawn().status


function map_project_name(project: string) {
  switch (project) {
    case "x.org/x11": return "x.org/libX11";
    case "x.org/exts": return "x.org/libXext";
    case "libexpat.github.io": return "github.com/libexpat";
    case "pcre.org/v2": return "pcre.org";
    case "gflags.github.io": return "github.com/gflags";
    case "rubygems.org": return "ruby-lang.org";
    case "google.github.io/snappy": return "google.com/snappy";
    case "giflib.sourceforge.io": return "sf.net/giflib";
    case "openmp.llvm.org": return "llvm.org/openmp";
    case "poppler.freedesktop.org": return "freedesktop.org/poppler";
    case "github.com/google/brotli": return "google.com/brotli";
    case "pyyaml.org": return "pyyaml.org/libyaml";
    case "npmjs.com": return "nodejs.org";
    case "rust-lang.org/cargo": return "rust-lang.org";
    case "opus-codec.org": return "xiph.org/opus";
    case "lame.sourceforge.io": return "sf.net/lame";
    case 'alsa-project.org/alsa-lib': return 'alsa-project.org';
    case 'github.com/AOMediaCodec/libavif': return 'aomedia.org/libavif';

    // no sane release schedule so fuck this shit
    case "abseil.io":
    case "facebook.com/folly":
    case "protobuf.dev":
    case "github.com/facebookincubator/fizz":
      return;

    // no longer an explicit dep
    case 'pkgx.sh':
    case "tea.xyz":
      return;

    default:
      return project;
  }
}